 Filtering Transactions
 
 
Suppose you have a list of financial transactions and you want to filter transactions based on certain criteria, such as finding all transactions over a certain amount.

public class Transaction {
    private String type;
    private double amount;

    public Transaction(String type, double amount) {
        this.type = type;
        this.amount = amount;
    }

    public String getType() {
        return type;
    }

    public double getAmount() {
        return amount;
    }

    @Override
    public String toString() {
        return "Transaction{" +
                "type='" + type + '\'' +
                ", amount=" + amount +
                '}';
    }
}

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class FinancialExample {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("Deposit", 500.0),
                new Transaction("Withdrawal", 150.0),
                new Transaction("Deposit", 200.0),
                new Transaction("Withdrawal", 50.0)
        );

        double threshold = 100.0;
        List<Transaction> largeTransactions = transactions.stream()
                .filter(t -> t.getAmount() > threshold)
                .collect(Collectors.toList());

        largeTransactions.forEach(System.out::println);
    }
}

. Calculating Total Amount of Deposits

import java.util.Arrays;
import java.util.List;

public class FinancialExample {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("Deposit", 500.0),
                new Transaction("Withdrawal", 150.0),
                new Transaction("Deposit", 200.0),
                new Transaction("Withdrawal", 50.0)
        );

        double totalDeposits = transactions.stream()
                .filter(t -> "Deposit".equals(t.getType()))
                .mapToDouble(Transaction::getAmount)
                .sum();

        System.out.println("Total Deposits: " + totalDeposits);
    }
}


3. Sorting Transactions by Amount
If you need to sort transactions by amount in descending order, lambda expressions can be used with the sorted method.

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class FinancialExample {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("Deposit", 500.0),
                new Transaction("Withdrawal", 150.0),
                new Transaction("Deposit", 200.0),
                new Transaction("Withdrawal", 50.0)
        );

        List<Transaction> sortedTransactions = transactions.stream()
                .sorted(Comparator.comparingDouble(Transaction::getAmount).reversed())
                .collect(Collectors.toList());

        sortedTransactions.forEach(System.out::println);
    }
}



. Grouping Transactions by Type

import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class FinancialExample {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("Deposit", 500.0),
                new Transaction("Withdrawal", 150.0),
                new Transaction("Deposit", 200.0),
                new Transaction("Withdrawal", 50.0)
        );

        Map<String, List<Transaction>> groupedByType = transactions.stream()
                .collect(Collectors.groupingBy(Transaction::getType));

        groupedByType.forEach((type, trans) -> {
            System.out.println(type + ":");
            trans.forEach(System.out::println);
        });
    }
}

Calculating Average Withdrawal Amount

import java.util.Arrays;
import java.util.List;

public class FinancialExample {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("Deposit", 500.0),
                new Transaction("Withdrawal", 150.0),
                new Transaction("Deposit", 200.0),
                new Transaction("Withdrawal", 50.0)
        );

        double averageWithdrawal = transactions.stream()
                .filter(t -> "Withdrawal".equals(t.getType()))
                .mapToDouble(Transaction::getAmount)
                .average()
                .orElse(0.0);

        System.out.println("Average Withdrawal: " + averageWithdrawal);
    }
}


6. Transforming Transactions to Descriptive Strings


import java.util.Arrays;
import java.util.List;

public class FinancialExample {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("Deposit", 500.0),
                new Transaction("Withdrawal", 150.0),
                new Transaction("Deposit", 200.0),
                new Transaction("Withdrawal", 50.0)
        );

        List<String> descriptions = transactions.stream()
                .map(t -> String.format("Type: %s, Amount: %.2f", t.getType(), t.getAmount()))
                .collect(Collectors.toList());

        descriptions.forEach(System.out::println);
    }
}

 Combining Multiple Operations
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class FinancialExample {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("Deposit", 500.0),
                new Transaction("Withdrawal", 150.0),
                new Transaction("Deposit", 200.0),
                new Transaction("Withdrawal", 50.0)
        );

        double totalDepositAboveThreshold = transactions.stream()
                .filter(t -> "Deposit".equals(t.getType()) && t.getAmount() > 100)
                .mapToDouble(Transaction::getAmount)
                .sum();

        System.out.println("Total Deposits Above Threshold: " + totalDepositAboveThreshold);
    }
}

Lambda expressions and streams in Java allow you to perform complex operations on collections with more concise and readable code. They are especially useful in the financial domain for tasks such as filtering transactions, calculating aggregates, sorting data, and grouping information. By leveraging these features, you can write more expressive and efficient data processing code.


Example: Calculating Total Interest Earned

public class InvestmentAccount {
    private String accountName;
    private double principal;
    private double annualInterestRate; // as a percentage

    public InvestmentAccount(String accountName, double principal, double annualInterestRate) {
        this.accountName = accountName;
        this.principal = principal;
        this.annualInterestRate = annualInterestRate;
    }

    public String getAccountName() {
        return accountName;
    }

    public double getPrincipal() {
        return principal;
    }

    public double getAnnualInterestRate() {
        return annualInterestRate;
    }

    @Override
    public String toString() {
        return "InvestmentAccount{" +
                "accountName='" + accountName + '\'' +
                ", principal=" + principal +
                ", annualInterestRate=" + annualInterestRate +
                '}';
    }
}

import java.util.Arrays;
import java.util.List;

public class FinancialExample {

    public static void main(String[] args) {
        List<InvestmentAccount> accounts = Arrays.asList(
                new InvestmentAccount("Account A", 1000.0, 5.0), // 5% interest
                new InvestmentAccount("Account B", 2000.0, 3.5), // 3.5% interest
                new InvestmentAccount("Account C", 1500.0, 4.0)  // 4% interest
        );

        // Calculate total interest earned
        double totalInterest = accounts.stream()
                .mapToDouble(account -> account.getPrincipal() * (account.getAnnualInterestRate() / 100))
                .sum();

        System.out.println("Total Interest Earned: " + totalInterest);
    }
}


Problem Statement: Customer Transaction Analysis
You are given a list of customer transactions where each transaction has the following attributes:

Transaction ID: A unique identifier for the transaction (String).
Customer ID: An identifier for the customer (String).
Transaction Type: The type of transaction, e.g., "Purchase", "Refund", "Transfer" (String).
Amount: The amount of money involved in the transaction (double).
Date: The date of the transaction (LocalDate).
Tasks:

Filter Transactions: Create a lambda expression to filter out all transactions of type "Purchase" that have an amount greater than $100.

Calculate Total Amount: Calculate the total amount of all transactions for a given customer ID using lambda expressions.

Group Transactions by Type: Group all transactions by type and provide the total amount for each type using lambda expressions.

Find Most Recent Transaction: Find the most recent transaction for a specific customer using lambda expressions and streams.

Problem Statement: Customer Transaction Analysis
You are given a list of customer transactions where each transaction has the following attributes:

Transaction ID: A unique identifier for the transaction (String).
Customer ID: An identifier for the customer (String).
Transaction Type: The type of transaction, e.g., "Purchase", "Refund", "Transfer" (String).
Amount: The amount of money involved in the transaction (double).
Date: The date of the transaction (LocalDate).
Tasks:

Filter Transactions: Create a lambda expression to filter out all transactions of type "Purchase" that have an amount greater than $100.

Calculate Total Amount: Calculate the total amount of all transactions for a given customer ID using lambda expressions.

Group Transactions by Type: Group all transactions by type and provide the total amount for each type using lambda expressions.

Find Most Recent Transaction: Find the most recent transaction for a specific customer using lambda expressions and streams.


import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class TransactionAnalysis {

    public static void main(String[] args) {
        List<Transaction> transactions = Arrays.asList(
                new Transaction("T001", "C001", "Purchase", 150.0, LocalDate.of(2024, 6, 15)),
                new Transaction("T002", "C002", "Refund", 50.0, LocalDate.of(2024, 6, 17)),
                new Transaction("T003", "C001", "Purchase", 200.0, LocalDate.of(2024, 6, 18)),
                new Transaction("T004", "C003", "Transfer", 300.0, LocalDate.of(2024, 6, 19)),
                new Transaction("T005", "C001", "Purchase", 80.0, LocalDate.of(2024, 6, 20))
        );

        // 1. Filter Transactions: Purchases greater than $100
        List<Transaction> largePurchases = transactions.stream()
                .filter(t -> "Purchase".equals(t.getType()) && t.getAmount() > 100)
                .collect(Collectors.toList());
        System.out.println("Large Purchases:");
        largePurchases.forEach(System.out::println);

        // 2. Calculate Total Amount for a Customer
        String customerId = "C001";
        double totalAmount = transactions.stream()
                .filter(t -> customerId.equals(t.getCustomerId()))
                .mapToDouble(Transaction::getAmount)
                .sum();
        System.out.println("\nTotal Amount for Customer " + customerId + ": " + totalAmount);

        // 3. Group Transactions by Type and Calculate Total Amount for Each Type
        Map<String, Double> totalAmountByType = transactions.stream()
                .collect(Collectors.groupingBy(
                        Transaction::getType,
                        Collectors.summingDouble(Transaction::getAmount)
                ));
        System.out.println("\nTotal Amount by Transaction Type:");
        totalAmountByType.forEach((type, amount) -> System.out.println(type + ": " + amount));

        // 4. Find Most Recent Transaction for a Customer
        Transaction mostRecentTransaction = transactions.stream()
                .filter(t -> customerId.equals(t.getCustomerId()))
                .max((t1, t2) -> t1.getDate().compareTo(t2.getDate()))
                .orElse(null);
        System.out.println("\nMost Recent Transaction for Customer " + customerId + ": " + mostRecentTransaction);
    }
}


Exercise: Mutual Fund Portfolio Analysis
Scenario: You have a list of mutual fund investments where each investment has the following attributes:

Fund Name: The name of the mutual fund (String).
Investment Amount: The amount invested in the fund (double).
Annual Return Rate: The annual return rate of the fund (percentage, double).
Investment Date: The date when the investment was made (LocalDate).
Your task is to perform the following operations using lambda expressions and streams:

Filter Investments: Filter out all investments in mutual funds that have an annual return rate greater than 5%.

Calculate Total Investment Amount: Calculate the total investment amount across all mutual funds.

Find the Mutual Fund with the Highest Return Rate: Identify the mutual fund with the highest annual return rate.

Group Investments by Fund Name: Group investments by mutual fund name and calculate the total investment amount for each fund.

Calculate the Average Annual Return Rate: Compute the average annual return rate of all mutual funds.

import java.time.LocalDate;

public class MutualFundInvestment {
    private String fundName;
    private double investmentAmount;
    private double annualReturnRate; // as a percentage
    private LocalDate investmentDate;

    public MutualFundInvestment(String fundName, double investmentAmount, double annualReturnRate, LocalDate investmentDate) {
        this.fundName = fundName;
        this.investmentAmount = investmentAmount;
        this.annualReturnRate = annualReturnRate;
        this.investmentDate = investmentDate;
    }

    public String getFundName() {
        return fundName;
    }

    public double getInvestmentAmount() {
        return investmentAmount;
    }

    public double getAnnualReturnRate() {
        return annualReturnRate;
    }

    public LocalDate getInvestmentDate() {
        return investmentDate;
    }

    @Override
    public String toString() {
        return "MutualFundInvestment{" +
                "fundName='" + fundName + '\'' +
                ", investmentAmount=" + investmentAmount +
                ", annualReturnRate=" + annualReturnRate +
                ", investmentDate=" + investmentDate +
                '}';
    }
}

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

public class MutualFundAnalysis {

    public static void main(String[] args) {
        List<MutualFundInvestment> investments = Arrays.asList(
                new MutualFundInvestment("Growth Fund A", 5000.0, 6.5, LocalDate.of(2023, 1, 15)),
                new MutualFundInvestment("Income Fund B", 3000.0, 4.2, LocalDate.of(2023, 2, 20)),
                new MutualFundInvestment("Growth Fund A", 2000.0, 6.5, LocalDate.of(2023, 3, 10)),
                new MutualFundInvestment("Balanced Fund C", 1500.0, 5.0, LocalDate.of(2023, 4, 5)),
                new MutualFundInvestment("Income Fund B", 1000.0, 4.2, LocalDate.of(2023, 5, 30))
        );

        // 1. Filter Investments: Annual return rate greater than 5%
        List<MutualFundInvestment> highReturnInvestments = investments.stream()
                .filter(i -> i.getAnnualReturnRate() > 5.0)
                .collect(Collectors.toList());
        System.out.println("Investments with Annual Return Rate Greater Than 5%:");
        highReturnInvestments.forEach(System.out::println);

        // 2. Calculate Total Investment Amount
        double totalInvestmentAmount = investments.stream()
                .mapToDouble(MutualFundInvestment::getInvestmentAmount)
                .sum();
        System.out.println("\nTotal Investment Amount: " + totalInvestmentAmount);

        // 3. Find the Mutual Fund with the Highest Return Rate
        Optional<MutualFundInvestment> highestReturnFund = investments.stream()
                .max((i1, i2) -> Double.compare(i1.getAnnualReturnRate(), i2.getAnnualReturnRate()));
        System.out.println("\nMutual Fund with the Highest Return Rate:");
        highestReturnFund.ifPresent(System.out::println);

        // 4. Group Investments by Fund Name and Calculate Total Investment Amount for Each Fund
        Map<String, Double> totalInvestmentByFund = investments.stream()
                .collect(Collectors.groupingBy(
                        MutualFundInvestment::getFundName,
                        Collectors.summingDouble(MutualFundInvestment::getInvestmentAmount)
                ));
        System.out.println("\nTotal Investment Amount by Fund:");
        totalInvestmentByFund.forEach((fundName, amount) -> System.out.println(fundName + ": " + amount));

        // 5. Calculate the Average Annual Return Rate
        double averageReturnRate = investments.stream()
                .mapToDouble(MutualFundInvestment::getAnnualReturnRate)
                .average()
                .orElse(0.0);
        System.out.println("\nAverage Annual Return Rate: " + averageReturnRate);
    }
}

